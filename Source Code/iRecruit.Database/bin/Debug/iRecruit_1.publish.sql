/*
Deployment script for iRecruit

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "iRecruit"
:setvar DefaultFilePrefix "iRecruit"
:setvar DefaultDataPath "C:\Program Files (x86)\Microsoft SQL Server\MSSQL12.SQL2014\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files (x86)\Microsoft SQL Server\MSSQL12.SQL2014\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE Latin1_General_CI_AI
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[ActivityLog]...';


GO
CREATE TABLE [dbo].[ActivityLog] (
    [ActivityLogID] INT           IDENTITY (1, 1) NOT NULL,
    [IndentID]      INT           NULL,
    [UserID]        VARCHAR (100) NULL,
    [LogTypeID]     INT           NULL,
    [Header]        VARCHAR (500) NULL,
    [Description]   VARCHAR (MAX) NULL,
    [Comments]      VARCHAR (MAX) NULL,
    [RecordDate]    DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([ActivityLogID] ASC)
);


GO
PRINT N'Creating [dbo].[Branches]...';


GO
CREATE TABLE [dbo].[Branches] (
    [BranchID]   INT           IDENTITY (1, 1) NOT NULL,
    [CompanyID]  INT           NULL,
    [Code]       VARCHAR (100) NULL,
    [Name]       VARCHAR (100) NULL,
    [Address]    VARCHAR (250) NULL,
    [City]       VARCHAR (100) NULL,
    [State]      VARCHAR (75)  NULL,
    [Country]    VARCHAR (100) NULL,
    [PostalCode] VARCHAR (10)  NULL,
    [Email]      VARCHAR (100) NULL,
    [Phone]      VARCHAR (10)  NULL,
    [Fax]        VARCHAR (10)  NULL,
    [URL]        VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([BranchID] ASC)
);


GO
PRINT N'Creating [dbo].[Candidates]...';


GO
CREATE TABLE [dbo].[Candidates] (
    [CandidateID]           INT           IDENTITY (1, 1) NOT NULL,
    [IndentNumber]          VARCHAR (25)  NULL,
    [FirstName]             VARCHAR (100) NULL,
    [LastName]              VARCHAR (100) NULL,
    [Gender]                VARCHAR (1)   NULL,
    [DOB]                   DATETIME      NULL,
    [Email]                 VARCHAR (100) NULL,
    [ContactNumber]         VARCHAR (20)  NULL,
    [Skills]                VARCHAR (200) NULL,
    [CurrentTitle]          VARCHAR (100) NULL,
    [CurrentCompany]        VARCHAR (200) NULL,
    [CurrentLocation]       VARCHAR (100) NULL,
    [Certifications]        VARCHAR (200) NULL,
    [TotalExperience]       DECIMAL (18)  NULL,
    [Passport]              BIT           NULL,
    [Visa]                  BIT           NULL,
    [AadhaarNumber]         VARCHAR (20)  NULL,
    [TravelledOnsiteBefore] BIT           NULL,
    [Reference1]            VARCHAR (100) NULL,
    [Reference1Contact]     VARCHAR (100) NULL,
    [Reference2]            VARCHAR (100) NULL,
    [Reference2Contact]     VARCHAR (100) NULL,
    [ResumeSourceTypeID]    INT           NULL,
    [ResumeSourceDetail]    VARCHAR (300) NULL,
    [CurrentCTC]            MONEY         NULL,
    [ExpectedCTC]           MONEY         NULL,
    [CandidateStatusTypeID] INT           NULL,
    [Remarks]               VARCHAR (500) NULL,
    [CreatedBy]             VARCHAR (200) NULL,
    [CreatedDate]           DATETIME      NULL,
    [ModifiedBy]            VARCHAR (200) NULL,
    [ModifiedDate]          DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CandidateID] ASC)
);


GO
PRINT N'Creating [dbo].[CandidatesHistory]...';


GO
CREATE TABLE [dbo].[CandidatesHistory] (
    [CandidatesHistoryID]   INT           IDENTITY (1, 1) NOT NULL,
    [CandidateID]           INT           NULL,
    [IndentNumber]          VARCHAR (25)  NULL,
    [FirstName]             VARCHAR (100) NULL,
    [LastName]              VARCHAR (100) NULL,
    [Gender]                VARCHAR (1)   NULL,
    [DOB]                   DATETIME      NULL,
    [Email]                 VARCHAR (100) NULL,
    [ContactNumber]         VARCHAR (20)  NULL,
    [Skills]                VARCHAR (200) NULL,
    [CurrentTitle]          VARCHAR (100) NULL,
    [CurrentCompany]        VARCHAR (200) NULL,
    [CurrentLocation]       VARCHAR (100) NULL,
    [Certifications]        VARCHAR (200) NULL,
    [TotalExperience]       DECIMAL (18)  NULL,
    [Passport]              BIT           NULL,
    [Visa]                  BIT           NULL,
    [AadhaarNumber]         VARCHAR (20)  NULL,
    [TravelledOnsiteBefore] BIT           NULL,
    [Reference1]            VARCHAR (100) NULL,
    [Reference1Contact]     VARCHAR (100) NULL,
    [Reference2]            VARCHAR (100) NULL,
    [Reference2Contact]     VARCHAR (100) NULL,
    [ResumeSourceTypeID]    INT           NULL,
    [ResumeSourceDetail]    VARCHAR (300) NULL,
    [CurrentCTC]            MONEY         NULL,
    [ExpectedCTC]           MONEY         NULL,
    [CandidateStatusTypeID] INT           NULL,
    [Remarks]               VARCHAR (500) NULL,
    [CreatedBy]             VARCHAR (200) NULL,
    [CreatedDate]           DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([CandidatesHistoryID] ASC)
);


GO
PRINT N'Creating [dbo].[Company]...';


GO
CREATE TABLE [dbo].[Company] (
    [CompanyID]  INT           IDENTITY (1, 1) NOT NULL,
    [Code]       VARCHAR (100) NULL,
    [Name]       VARCHAR (100) NULL,
    [Address]    VARCHAR (250) NULL,
    [City]       VARCHAR (100) NULL,
    [State]      VARCHAR (75)  NULL,
    [Country]    VARCHAR (100) NULL,
    [PostalCode] VARCHAR (10)  NULL,
    [Email]      VARCHAR (100) NULL,
    [Phone]      VARCHAR (10)  NULL,
    [Fax]        VARCHAR (10)  NULL,
    [URL]        VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([CompanyID] ASC)
);


GO
PRINT N'Creating [dbo].[Consultancies]...';


GO
CREATE TABLE [dbo].[Consultancies] (
    [ConsultancyID]   INT           IDENTITY (1, 1) NOT NULL,
    [ConsultancyName] VARCHAR (100) NULL,
    [Address1]        VARCHAR (300) NULL,
    [Address2]        VARCHAR (300) NULL,
    [City]            VARCHAR (50)  NULL,
    [State]           VARCHAR (50)  NULL,
    [Country]         VARCHAR (100) NULL,
    [PostalCode]      VARCHAR (20)  NULL,
    [ContactPerson]   VARCHAR (100) NULL,
    [ContactNumber]   VARCHAR (20)  NULL,
    [Email]           VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([ConsultancyID] ASC)
);


GO
PRINT N'Creating [dbo].[DepartmentRoles]...';


GO
CREATE TABLE [dbo].[DepartmentRoles] (
    [DepartmentRoleID] INT           IDENTITY (1, 1) NOT NULL,
    [DepartmentID]     INT           NULL,
    [BranchID]         INT           NULL,
    [FunctionHead]     VARCHAR (200) NULL,
    [SVP]              VARCHAR (200) NULL,
    [Active]           BIT           NULL,
    PRIMARY KEY CLUSTERED ([DepartmentRoleID] ASC)
);


GO
PRINT N'Creating [dbo].[Departments]...';


GO
CREATE TABLE [dbo].[Departments] (
    [DepartmentID] INT           IDENTITY (1, 1) NOT NULL,
    [CompanyID]    INT           NULL,
    [Code]         VARCHAR (50)  NULL,
    [Name]         VARCHAR (200) NULL,
    [Active]       BIT           NULL,
    [ModifiedDate] DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([DepartmentID] ASC)
);


GO
PRINT N'Creating [dbo].[EmailNotifications]...';


GO
CREATE TABLE [dbo].[EmailNotifications] (
    [EmailNotificationID] INT            IDENTITY (1, 1) NOT NULL,
    [EmailFrom]           VARCHAR (100)  NULL,
    [EmailTo]             VARCHAR (100)  NULL,
    [EmailCc]             VARCHAR (100)  NULL,
    [Subject]             VARCHAR (100)  NULL,
    [BodyHtml]            VARCHAR (2000) NULL,
    [Status]              INT            NULL,
    [RecordDate]          DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([EmailNotificationID] ASC)
);


GO
PRINT N'Creating [dbo].[Features]...';


GO
CREATE TABLE [dbo].[Features] (
    [FeatureID]   INT           IDENTITY (1, 1) NOT NULL,
    [Code]        VARCHAR (50)  NULL,
    [CompanyID]   INT           NULL,
    [Description] VARCHAR (250) NULL,
    PRIMARY KEY CLUSTERED ([FeatureID] ASC)
);


GO
PRINT N'Creating [dbo].[Indent]...';


GO
CREATE TABLE [dbo].[Indent] (
    [IndentID]                        INT            IDENTITY (1, 1) NOT NULL,
    [IndentNumber]                    VARCHAR (25)   NOT NULL,
    [IndentDate]                      DATETIME       NULL,
    [BranchID]                        INT            NULL,
    [DepartmentID]                    INT            NULL,
    [Client_Domain]                   VARCHAR (50)   NULL,
    [ProjectStatusID]                 INT            NULL,
    [ReasonID]                        INT            NULL,
    [LocationTypeID]                  INT            NULL,
    [EmploymentTypeID]                INT            NULL,
    [StaffingModeID]                  INT            NULL,
    [ContractMonths]                  INT            NULL,
    [Technologies]                    VARCHAR (250)  NULL,
    [TechnicalSkills]                 VARCHAR (1000) NULL,
    [BehaviouralSkills]               VARCHAR (1000) NULL,
    [PositionTitle]                   VARCHAR (50)   NULL,
    [NoOfPositions]                   INT            NULL,
    [MinExperiance]                   INT            NULL,
    [MaxExperiance]                   INT            NULL,
    [VisaType]                        VARCHAR (20)   NULL,
    [TargetJoinDate]                  DATETIME       NULL,
    [InterviewPanel1]                 VARCHAR (250)  NULL,
    [InterviewPanel2]                 VARCHAR (250)  NULL,
    [InterviewPanel3]                 VARCHAR (250)  NULL,
    [InterviewPanel4]                 VARCHAR (250)  NULL,
    [InterviewPanel5]                 VARCHAR (250)  NULL,
    [ReportingManager]                VARCHAR (100)  NULL,
    [DeploymentLocation]              VARCHAR (200)  NULL,
    [Qualification]                   VARCHAR (200)  NULL,
    [Others]                          VARCHAR (200)  NULL,
    [Indentor]                        VARCHAR (200)  NULL,
    [Indent_Status]                   INT            NULL,
    [IndentorRemarks]                 VARCHAR (500)  NULL,
    [FunctionHead]                    VARCHAR (250)  NULL,
    [FunctionHeadStatusTypeID]        INT            NULL,
    [FunctionHeadStatusDate]          DATETIME       NULL,
    [FunctionHeadRemarks]             VARCHAR (500)  NULL,
    [SeniorVicePresident]             VARCHAR (250)  NULL,
    [SeniorVicePresidentStatusTypeID] INT            NULL,
    [SeniorVicePresidentStatusDate]   DATETIME       NULL,
    [SeniorVicePresidentRemarks]      VARCHAR (500)  NULL,
    [JobDescription]                  VARCHAR (MAX)  NULL,
    [UploadFile_Indents]              VARCHAR (100)  NULL,
    [StatusChangedBy]                 VARCHAR (100)  NULL,
    [AssignedTo]                      VARCHAR (100)  NULL,
    [CreatedBy]                       VARCHAR (100)  NULL,
    [CreatedDate]                     DATETIME       NULL,
    [ModifiedBy]                      VARCHAR (100)  NULL,
    [ModifiedDate]                    DATETIME       NULL,
    PRIMARY KEY CLUSTERED ([IndentID] ASC),
    UNIQUE NONCLUSTERED ([IndentNumber] ASC)
);


GO
PRINT N'Creating [dbo].[InterviewFeedbacks]...';


GO
CREATE TABLE [dbo].[InterviewFeedbacks] (
    [InterviewFeedbacksID]             INT           IDENTITY (1, 1) NOT NULL,
    [CandidateID]                      INT           NULL,
    [InterviewRound]                   INT           NULL,
    [InterviewerName]                  VARCHAR (100) NULL,
    [PositionFor]                      VARCHAR (100) NULL,
    [ReleventExperience]               DECIMAL (18)  NULL,
    [ReleventExperienceDiscountReason] VARCHAR (400) NULL,
    [TechKnowledgeAreas]               VARCHAR (100) NULL,
    [TechKnowledgeAreasLevel]          VARCHAR (1)   NULL,
    [TechKnowledgeAreasComments]       VARCHAR (200) NULL,
    [AnalysisAreas]                    VARCHAR (100) NULL,
    [AnalysisAreasLevel]               VARCHAR (1)   NULL,
    [AnalysisAreasComments]            VARCHAR (200) NULL,
    [DesignAreas]                      VARCHAR (100) NULL,
    [DesignAreasLevel]                 VARCHAR (1)   NULL,
    [DesignAreasComments]              VARCHAR (200) NULL,
    [CodingAreas]                      VARCHAR (100) NULL,
    [CodingAreasLevel]                 VARCHAR (1)   NULL,
    [CodingAreasComments]              VARCHAR (200) NULL,
    [DatabaseAreas]                    VARCHAR (100) NULL,
    [DatabaseAreasLevel]               VARCHAR (1)   NULL,
    [DatabaseAreasComments]            VARCHAR (200) NULL,
    [TestingAreas]                     VARCHAR (100) NULL,
    [TestingAreasLevel]                VARCHAR (1)   NULL,
    [TestingAreasComments]             VARCHAR (200) NULL,
    [ResultOrientationLevel]           VARCHAR (1)   NULL,
    [ResultOrientationComments]        VARCHAR (200) NULL,
    [CommunicationSkillsLevel]         VARCHAR (1)   NULL,
    [CommunicationSkillsComments]      VARCHAR (200) NULL,
    [TeamWorkingLevel]                 VARCHAR (1)   NULL,
    [TeamWorkingComments]              VARCHAR (200) NULL,
    [LeadershipCapabilityLevel]        VARCHAR (1)   NULL,
    [LeadershipCapabilityComments]     VARCHAR (200) NULL,
    [AttitudeLevel]                    VARCHAR (1)   NULL,
    [AttitudeComments]                 VARCHAR (200) NULL,
    [OverallRatingLevel]               VARCHAR (1)   NULL,
    [OverallRatingComments]            VARCHAR (200) NULL,
    [SelectionReason]                  VARCHAR (200) NULL,
    [PositivesRemarks]                 VARCHAR (200) NULL,
    [ConcernsGaps]                     VARCHAR (200) NULL,
    [PositionRecomended]               VARCHAR (200) NULL,
    [PositionSuggested]                VARCHAR (200) NULL,
    [AlternaticeCompetancy]            VARCHAR (200) NULL,
    [TrainingsNeededTechnical]         VARCHAR (200) NULL,
    [TrainingNeededBehavioral]         VARCHAR (200) NULL,
    [Status]                           INT           NULL,
    [CreatedBy]                        VARCHAR (200) NULL,
    [CreatedDate]                      DATETIME      NULL,
    [ModifiedBy]                       VARCHAR (200) NULL,
    [ModifiedDate]                     DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([InterviewFeedbacksID] ASC)
);


GO
PRINT N'Creating [dbo].[InterviewPanel]...';


GO
CREATE TABLE [dbo].[InterviewPanel] (
    [InterviewPanelID] INT           IDENTITY (1, 1) NOT NULL,
    [Name]             VARCHAR (250) NULL,
    [CompanyID]        INT           NULL,
    [Departments]      VARCHAR (200) NULL,
    [Technologies]     VARCHAR (200) NULL,
    [Level]            VARCHAR (200) NULL,
    PRIMARY KEY CLUSTERED ([InterviewPanelID] ASC)
);


GO
PRINT N'Creating [dbo].[InterviewSchedule]...';


GO
CREATE TABLE [dbo].[InterviewSchedule] (
    [InterviewScheduleID]   INT           IDENTITY (1, 1) NOT NULL,
    [CandidateID]           INT           NULL,
    [InverviewRound]        INT           NULL,
    [ScheduledInterviewers] VARCHAR (200) NULL,
    [Subject]               VARCHAR (100) NULL,
    [Description]           VARCHAR (500) NULL,
    [StartTime]             DATETIME      NULL,
    [EndTime]               DATETIME      NULL,
    [AttachResume]          BIT           NULL,
    [Status]                INT           NULL,
    [CreatedBy]             VARCHAR (200) NULL,
    [CreatedDate]           DATETIME      NULL,
    [ModifiedBy]            VARCHAR (200) NULL,
    [ModifiedDate]          DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([InterviewScheduleID] ASC)
);


GO
PRINT N'Creating [dbo].[Resumes]...';


GO
CREATE TABLE [dbo].[Resumes] (
    [ResumeID]       INT           IDENTITY (1, 1) NOT NULL,
    [CandidateID]    INT           NULL,
    [ResumePath]     VARCHAR (200) NULL,
    [FileType]       VARCHAR (10)  NULL,
    [CandidatePhoto] VARBINARY (1) NULL,
    PRIMARY KEY CLUSTERED ([ResumeID] ASC)
);


GO
PRINT N'Creating [dbo].[TechnologiesAndSkills]...';


GO
CREATE TABLE [dbo].[TechnologiesAndSkills] (
    [TechnologyAndSkillID] INT           IDENTITY (1, 1) NOT NULL,
    [Code]                 VARCHAR (50)  NULL,
    [CompanyID]            INT           NULL,
    [Name]                 VARCHAR (250) NULL,
    [SkillType]            INT           NULL,
    [Active]               BIT           NULL,
    PRIMARY KEY CLUSTERED ([TechnologyAndSkillID] ASC)
);


GO
PRINT N'Creating [dbo].[Type]...';


GO
CREATE TABLE [dbo].[Type] (
    [TypeID]       INT           IDENTITY (1, 1) NOT NULL,
    [TypeClassID]  INT           NULL,
    [Code]         VARCHAR (10)  NULL,
    [Name]         VARCHAR (50)  NULL,
    [Description]  VARCHAR (500) NULL,
    [Active]       BIT           NULL,
    [ModifiedDate] DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([TypeID] ASC)
);


GO
PRINT N'Creating [dbo].[TypeClass]...';


GO
CREATE TABLE [dbo].[TypeClass] (
    [TypeClassID]  INT          IDENTITY (1, 1) NOT NULL,
    [Code]         VARCHAR (10) NULL,
    [Name]         VARCHAR (30) NULL,
    [Description]  VARCHAR (50) NULL,
    [Active]       BIT          NULL,
    [ModifiedDate] DATETIME     NULL,
    PRIMARY KEY CLUSTERED ([TypeClassID] ASC)
);


GO
PRINT N'Creating [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [UserID]         VARCHAR (100)  NULL,
    [CompanyID]      INT            NULL,
    [Name]           VARCHAR (250)  NULL,
    [Title]          VARCHAR (250)  NULL,
    [Email]          VARCHAR (250)  NULL,
    [Branches]       VARCHAR (250)  NULL,
    [AccessFeatures] VARCHAR (1000) NULL,
    [Photo]          VARCHAR (MAX)  NULL
);


GO
PRINT N'Creating unnamed constraint on [dbo].[TechnologiesAndSkills]...';


GO
ALTER TABLE [dbo].[TechnologiesAndSkills]
    ADD DEFAULT ((1)) FOR [SkillType];


GO
PRINT N'Creating unnamed constraint on [dbo].[ActivityLog]...';


GO
ALTER TABLE [dbo].[ActivityLog]
    ADD FOREIGN KEY ([IndentID]) REFERENCES [dbo].[Indent] ([IndentID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Branches]...';


GO
ALTER TABLE [dbo].[Branches]
    ADD FOREIGN KEY ([CompanyID]) REFERENCES [dbo].[Company] ([CompanyID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Candidates]...';


GO
ALTER TABLE [dbo].[Candidates]
    ADD FOREIGN KEY ([IndentNumber]) REFERENCES [dbo].[Indent] ([IndentNumber]);


GO
PRINT N'Creating unnamed constraint on [dbo].[DepartmentRoles]...';


GO
ALTER TABLE [dbo].[DepartmentRoles]
    ADD FOREIGN KEY ([BranchID]) REFERENCES [dbo].[Branches] ([BranchID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[DepartmentRoles]...';


GO
ALTER TABLE [dbo].[DepartmentRoles]
    ADD FOREIGN KEY ([DepartmentID]) REFERENCES [dbo].[Departments] ([DepartmentID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Departments]...';


GO
ALTER TABLE [dbo].[Departments]
    ADD FOREIGN KEY ([CompanyID]) REFERENCES [dbo].[Company] ([CompanyID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Features]...';


GO
ALTER TABLE [dbo].[Features]
    ADD FOREIGN KEY ([CompanyID]) REFERENCES [dbo].[Company] ([CompanyID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Indent]...';


GO
ALTER TABLE [dbo].[Indent]
    ADD FOREIGN KEY ([BranchID]) REFERENCES [dbo].[Branches] ([BranchID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Indent]...';


GO
ALTER TABLE [dbo].[Indent]
    ADD FOREIGN KEY ([DepartmentID]) REFERENCES [dbo].[Departments] ([DepartmentID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[InterviewFeedbacks]...';


GO
ALTER TABLE [dbo].[InterviewFeedbacks]
    ADD FOREIGN KEY ([CandidateID]) REFERENCES [dbo].[Candidates] ([CandidateID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[InterviewPanel]...';


GO
ALTER TABLE [dbo].[InterviewPanel]
    ADD FOREIGN KEY ([CompanyID]) REFERENCES [dbo].[Company] ([CompanyID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[InterviewSchedule]...';


GO
ALTER TABLE [dbo].[InterviewSchedule]
    ADD FOREIGN KEY ([CandidateID]) REFERENCES [dbo].[Candidates] ([CandidateID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Resumes]...';


GO
ALTER TABLE [dbo].[Resumes]
    ADD FOREIGN KEY ([CandidateID]) REFERENCES [dbo].[Candidates] ([CandidateID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[TechnologiesAndSkills]...';


GO
ALTER TABLE [dbo].[TechnologiesAndSkills]
    ADD FOREIGN KEY ([CompanyID]) REFERENCES [dbo].[Company] ([CompanyID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Type]...';


GO
ALTER TABLE [dbo].[Type]
    ADD FOREIGN KEY ([TypeClassID]) REFERENCES [dbo].[TypeClass] ([TypeClassID]);


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD FOREIGN KEY ([CompanyID]) REFERENCES [dbo].[Company] ([CompanyID]);


GO
PRINT N'Creating [dbo].[fn_Split]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

CREATE FUNCTION [dbo].[fn_Split](@sText varchar(8000), @sDelim varchar(20) = ' ')
RETURNS @retArray TABLE (idx smallint Primary Key, value varchar(8000))
AS
BEGIN
	DECLARE @idx smallint,
	@value varchar(8000),
	@bcontinue bit,
	@iStrike smallint,
	@iDelimlength tinyint

	IF @sDelim = 'Space'
	BEGIN
		SET @sDelim = ' '
	END

	SET @idx = 0
	SET @sText = LTrim(RTrim(@sText))
	SET @iDelimlength = DATALENGTH(@sDelim)
	SET @bcontinue = 1

	IF NOT ((@iDelimlength = 0) or (@sDelim = 'Empty'))
	BEGIN
		WHILE @bcontinue = 1
		BEGIN
			--If you can find the delimiter in the text, retrieve the first element and
			--insert it with its index into the return table.
			IF CHARINDEX(@sDelim, @sText)>0
			BEGIN
				SET @value = SUBSTRING(@sText,1, CHARINDEX(@sDelim,@sText)-1)
				BEGIN
					INSERT @retArray (idx, value)
					VALUES (@idx, @value)
				END
				--Trim the element and its delimiter from the front of the string.
				--Increment the index and loop.
				SET @iStrike = DATALENGTH(@value) + @iDelimlength
				SET @idx = @idx + 1
				SET @sText = LTrim(Right(@sText,DATALENGTH(@sText) - @iStrike))
		
			END
		ELSE
		BEGIN
			--If you can’t find the delimiter in the text, @sText is the last value in
			--@retArray.
			SET @value = @sText
			BEGIN
				INSERT @retArray (idx, value)
				VALUES (@idx, @value)
			END
			--Exit the WHILE loop.
			SET @bcontinue = 0
		END
	END
END
ELSE
BEGIN
	WHILE @bcontinue=1
	BEGIN
		--If the delimiter is an empty string, check for remaining text
		--instead of a delimiter. Insert the first character into the
		--retArray table. Trim the character from the front of the string.
		--Increment the index and loop.
		IF DATALENGTH(@sText)>1
		BEGIN
			SET @value = SUBSTRING(@sText,1,1)
			BEGIN
				INSERT @retArray (idx, value)
				VALUES (@idx, @value)
			END
			SET @idx = @idx+1
			SET @sText = SUBSTRING(@sText,2,DATALENGTH(@sText)-1)
			
		END
		ELSE
		BEGIN
			--One character remains.
			--Insert the character, and exit the WHILE loop.
			INSERT @retArray (idx, value)
			VALUES (@idx, @sText)
			SET @bcontinue = 0	
		END
	END

END
RETURN
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[prcExcuteInterviewWorkflow]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

-- **********************************************************    
-- @@Verion: 1    
-- SP Name: dbo.prcExcuteInterviewWorkflow   1 
-- Author: Niraj Sinha  
-- Create Date: 23/12/2014    
-- Description: process interview feedbacks
-- Parameters: 
-- @CandidateID INT
-- Return Values:    
-- i.e:   prcExcuteInterviewWorkflow @CandidateID=1
-- ********************************************************    
CREATE PROCEDURE [dbo].[prcExcuteInterviewWorkflow]    
	@CandidateID INT
AS     
BEGIN    
  	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	
	declare @SelectedTypeID INT
	select @SelectedTypeID = TypeID from Type join TypeClass on Type.TypeClassID = TypeClass.TypeClassID where TypeClass.Code = 8 and Type.Code = 5 
	declare @InProcessTypeID INT
	select @InProcessTypeID = TypeID from Type join TypeClass on Type.TypeClassID = TypeClass.TypeClassID where TypeClass.Code = 8 and Type.Code = 4 
	declare @RejectedTypeID INT 
	select @RejectedTypeID = TypeID from Type join TypeClass on Type.TypeClassID = TypeClass.TypeClassID where TypeClass.Code = 8 and Type.Code = 9 
	
	declare @Round1Status INT, 
	@Round2Status INT,
	@PositionRecomended INT,
	@HREmail varchar(200),
	@StatusChangedBy varchar(200),
	@ActivityTypeID INT,
	@ActivityHeader  varchar(200),
	@ActivityDescription varchar(500),
	@ActivityComments varchar(500),
	@RecordDate datetime,
	@IndentID INT,
	@CandidateName   varchar(200)
	
	select @HREmail = Email from Users where UserID = 'HR'
	select @IndentID = IndentID from indent i (nolock) 
						join Candidates c on i.IndentNumber = c.IndentNumber
						where CandidateID = @CandidateID
	select @CandidateName = FirstName + ' ' + LastName from Candidates where CandidateID=@CandidateID
	
	
	-- update candidate based on round2 status
	if exists (select 1 from InterviewFeedbacks where CandidateID = @CandidateID and InterviewRound = 2)
	begin
		select @Round2Status = Status, @PositionRecomended = PositionRecomended from InterviewFeedbacks where CandidateID = @CandidateID and InterviewRound = 2
		if @Round2Status = 1
		begin
			select @StatusChangedBy = isnull(ModifiedBy, CreatedBy) from InterviewFeedbacks where CandidateID = @CandidateID and InterviewRound = 2
			select @RecordDate = isnull(ModifiedDate, CreatedDate) from InterviewFeedbacks where CandidateID = @CandidateID and InterviewRound = 2
			if @PositionRecomended = 1
			begin
				update Candidates set CandidateStatusTypeID= @SelectedTypeID where CandidateID = @CandidateID
				select @ActivityTypeID =  TypeID from Type join TypeClass on Type.TypeClassID = TypeClass.TypeClassID where TypeClass.Code = 9 and Type.Code = 6
				select @ActivityDescription = @CandidateName + ' selected in Technical Round 2 by '+ (select Name from Users where UserID = isnull(@StatusChangedBy,''))
			end
			else
			begin
				update Candidates set CandidateStatusTypeID= @RejectedTypeID where CandidateID = @CandidateID
				select @ActivityTypeID =  TypeID from Type join TypeClass on Type.TypeClassID = TypeClass.TypeClassID where TypeClass.Code = 9 and Type.Code = 8
				select @ActivityDescription = @CandidateName + ' rejected in Technical Round 2 by '+ (select Name from Users where UserID = isnull(@StatusChangedBy,''))
			end
			set @ActivityHeader = 'Technical Interview Round 2'
			select @ActivityComments = OverallRatingComments from InterviewFeedbacks where CandidateID = @CandidateID and InterviewRound = 2
			-- return values for further processing
			select @HREmail as ToEmailNotifications
		end

	end
	else
	begin
		select @Round1Status = Status, @PositionRecomended = PositionRecomended from InterviewFeedbacks where CandidateID = @CandidateID and InterviewRound = 1
		-- update candidate based on round1 status
		if @Round1Status = 1
		begin
			select @StatusChangedBy = isnull(ModifiedBy, CreatedBy) from InterviewFeedbacks where CandidateID = @CandidateID and InterviewRound = 1
			select @RecordDate = isnull(ModifiedDate, CreatedDate) from InterviewFeedbacks where CandidateID = @CandidateID and InterviewRound = 1
			if @PositionRecomended = 1
			begin
				update Candidates set CandidateStatusTypeID= @InProcessTypeID where CandidateID = @CandidateID
				select @ActivityTypeID =  TypeID from Type join TypeClass on Type.TypeClassID = TypeClass.TypeClassID where TypeClass.Code = 9 and Type.Code = 5 
				select @ActivityDescription = @CandidateName + ' selected in Technical Round 1 by '+ (select Name from Users where UserID = isnull(@StatusChangedBy,''))
			end
			else
			begin
				update Candidates set CandidateStatusTypeID= @RejectedTypeID where CandidateID = @CandidateID
				select @ActivityTypeID =  TypeID from Type join TypeClass on Type.TypeClassID = TypeClass.TypeClassID where TypeClass.Code = 9 and Type.Code = 7
				select @ActivityDescription = @CandidateName + ' rejected in Technical Round 1 by '+ (select Name from Users where UserID = isnull(@StatusChangedBy,''))
			end
		
			set @ActivityHeader = 'Technical Interview Round 1'
			select @ActivityComments = OverallRatingComments from InterviewFeedbacks where CandidateID = @CandidateID and InterviewRound = 1
				
			-- return values for further processing
			select @HREmail as ToEmailNotifications
		end
	end	
	-- Insert into Activity log
	
	if len(isnull(@ActivityDescription,'')) > 0
	begin
		INSERT INTO ActivityLog( IndentID, UserID, LogTypeID, Header, Description, Comments, RecordDate)
		values (@IndentID, @StatusChangedBy, @ActivityTypeID, @ActivityHeader, @ActivityDescription, @ActivityComments, @RecordDate)
	end

	
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[prcExecuteIndentWorkflow]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

-- **********************************************************    
-- @@Verion: 1    
-- SP Name: dbo.prcExecuteIndentWorkflow   24 
-- Author: Niraj Sinha  
-- Create Date: 22/09/2014    
-- Description: assigns indent, and returns data for further action
-- Parameters: 
-- @IndentID INT
-- Return Values:    
-- i.e:   prcExecuteIndentWorkflow @IndentID=10
-- ********************************************************    
CREATE PROCEDURE [dbo].[prcExecuteIndentWorkflow]    
	@IndentID INT
AS     
BEGIN    
  	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	declare @UserName varchar(100),
	@IndentNumber varchar(100),
	@DepartmentID int,
	@BranchID int,
	@FH varchar(100),
	@FHName varchar(100),
	@FHStatusID INT,
	@SVP varchar(100),
	@SVPName varchar(100),
	@SVPStatusID INT,
	@CurrentStatus INT,
	@ConfiguredFH varchar(100),
	@ConfiguredSVP varchar(100),
	@AssignedTo varchar(100),
	@StatusChangedBy varchar(100),
	@CreatedBy varchar(100),
	@ToEmailNotifications varchar(500),
	@CcEmailNotifications varchar(500),
	@ActivityTypeID INT,
	@ActivityHeader varchar(500),
	@ActivityDescription varchar(400),
	@ActivityComments varchar(500),
	@IndentRemarks  varchar(500),
	@FHRemarks  varchar(500),
	@SVPRemarks  varchar(500),
	@RecordDate datetime
	-- Get current status
	select @UserName = CreatedBy,
		@DepartmentID = DepartmentID,
		@BranchID = BranchID,
		@IndentNumber = IndentNumber,
		@FHName = FunctionHead,
		@FHStatusID = FunctionHeadStatusTypeID,
		@SVPName = SeniorVicePresident,
		@SVPStatusID = SeniorVicePresidentStatusTypeID,
		@CurrentStatus = Indent_Status,
		@StatusChangedBy = StatusChangedBy,
		@CreatedBy = CreatedBy,
		@IndentRemarks = IndentorRemarks,
		@FHRemarks  = FunctionHeadRemarks,
		@SVPRemarks  = SeniorVicePresidentRemarks
	from Indent
	where IndentID = @IndentID
	select @RecordDate = getutcdate()
	-- Get function head and svp details
	select @ConfiguredFH = FunctionHead, @ConfiguredSVP = SVP from DepartmentRoles where DepartmentID =@DepartmentID  and BranchID = @BranchID and Active = 1
	select @FH = UserID from Users where Name like @FHName
	select @SVP = UserID from Users where Name like @SVPName
	
	-- Get all status values 
	declare @SubmitedStatusID INT 
	select @SubmitedStatusID = TypeID from Type join TypeClass on Type.TypeClassID = TypeClass.TypeClassID where TypeClass.Code = 7 and Type.Code = 2 
	declare @ApprovedStatusID INT 
	select @ApprovedStatusID = TypeID from Type join TypeClass on Type.TypeClassID = TypeClass.TypeClassID where TypeClass.Code = 7 and Type.Code = 3 
	declare @OnHoldStatusID INT 
	select @OnHoldStatusID = TypeID from Type join TypeClass on Type.TypeClassID = TypeClass.TypeClassID where TypeClass.Code = 7 and Type.Code = 4 
	declare @RejectedStatusID INT 
	select @RejectedStatusID = TypeID from Type join TypeClass on Type.TypeClassID = TypeClass.TypeClassID where TypeClass.Code = 7 and Type.Code = 5 
	declare @CancelledStatusID INT 
	select @CancelledStatusID = TypeID from Type join TypeClass on Type.TypeClassID = TypeClass.TypeClassID where TypeClass.Code = 7 and Type.Code = 6 
	
	-- get activity types
	declare @IndentRaisedActivityID INT 
	select @IndentRaisedActivityID = TypeID from Type join TypeClass on Type.TypeClassID = TypeClass.TypeClassID where TypeClass.Code = 9 and Type.Code = 1 
	declare @IndentApprovedActivityID INT 
	select @IndentApprovedActivityID = TypeID from Type join TypeClass on Type.TypeClassID = TypeClass.TypeClassID where TypeClass.Code = 9 and Type.Code = 2 
	declare @IndentRejectedActivityID INT 
	select @IndentRejectedActivityID = TypeID from Type join TypeClass on Type.TypeClassID = TypeClass.TypeClassID where TypeClass.Code = 9 and Type.Code = 3 
	declare @IndentOnHoldActivityID INT 
	select @IndentOnHoldActivityID = TypeID from Type join TypeClass on Type.TypeClassID = TypeClass.TypeClassID where TypeClass.Code = 9 and Type.Code = 4 
	
	
	-- If indent submitted by function head then assign it to svp
	if @CurrentStatus = @SubmitedStatusID
	begin
		
		if @StatusChangedBy = @FH or @StatusChangedBy = @ConfiguredFH
		begin
			set @AssignedTo = @ConfiguredSVP
			update Indent set FunctionHeadStatusDate = @RecordDate	where IndentID = @IndentID
		end
		else
		begin
			set @AssignedTo = @ConfiguredFH
		end
		update Indent set IndentDate = @RecordDate	where IndentID = @IndentID
		
		set @ToEmailNotifications = @AssignedTo
		set @CcEmailNotifications = isnull(@StatusChangedBy,'') -- + ',' + isnull(@CreatedBy,'')
		set @ActivityTypeID = @IndentRaisedActivityID

		set @ActivityDescription = 'Indent '+ @IndentNumber +' Raised by '+ (select Name from Users where UserID = isnull(@StatusChangedBy,''))
		set @ActivityHeader = 'Indent Raised'
		set @ActivityComments = @IndentRemarks
	end
	-- If indent is approved by fh then assign it to svp else assign back to HR
	if @CurrentStatus = @ApprovedStatusID
	begin
		if @StatusChangedBy = @FH or @StatusChangedBy = @ConfiguredFH
		begin
			set @AssignedTo = @ConfiguredSVP
			set @ActivityComments = @FHRemarks
			update Indent set FunctionHeadStatusDate = @RecordDate	where IndentID = @IndentID
		end
		else
		begin
			set @AssignedTo = 'HR'
			set @ActivityComments = @SVPRemarks
			update Indent set SeniorVicePresidentStatusDate = @RecordDate	where IndentID = @IndentID
		end
		set @ToEmailNotifications = @AssignedTo
		set @CcEmailNotifications = isnull(@StatusChangedBy,'') + ',' + isnull(@CreatedBy,'')
		set @ActivityTypeID = @IndentApprovedActivityID
		set @ActivityDescription = 'Indent '+ @IndentNumber +' Approved by '+ (select Name from Users where UserID = isnull(@StatusChangedBy,''))
		set @ActivityHeader = 'Indent Approved'
	end
	-- If indent is on hold then do not assign it to anybody, send notification email to stakeholders
	if @CurrentStatus = @OnHoldStatusID
	begin
		set @ToEmailNotifications = @CreatedBy
		set @CcEmailNotifications = isnull(@StatusChangedBy,'') + ',' + isnull(@ConfiguredFH,'') + ',' + isnull(@FH,'') + ',' + isnull(@ConfiguredSVP,'') + ',' + isnull(@SVP,'')
		set @ActivityTypeID = @IndentOnHoldActivityID
		set @ActivityDescription = 'Indent '+ @IndentNumber +' is kept on Hold by '+ (select Name from Users where UserID = isnull(@StatusChangedBy,''))
		set @ActivityHeader = 'Indent On Hold'
		
		if @StatusChangedBy = @SVP or @StatusChangedBy = @ConfiguredSVP
		begin
			set @ActivityComments = @SVPRemarks
			update Indent set SeniorVicePresidentStatusDate = @RecordDate	where IndentID = @IndentID
		end
		else
		begin
			set @ActivityComments = @FHRemarks
			update Indent set FunctionHeadStatusDate = @RecordDate	where IndentID = @IndentID
		end
	end
	-- If indent is cancelled or rejected
	if @CurrentStatus = @RejectedStatusID or @CurrentStatus = @CancelledStatusID
	begin
		set @ToEmailNotifications = @CreatedBy
		set @CcEmailNotifications = isnull(@StatusChangedBy,'') + ',' + isnull(@ConfiguredFH,'') + ',' + isnull(@FH,'') + ',' + isnull(@ConfiguredSVP,'') + ',' + isnull(@SVP,'')
		set @ActivityTypeID = @IndentRejectedActivityID
		set @ActivityDescription = 'Indent '+ @IndentNumber +' Rejected/Cancelled by '+ (select Name from Users where UserID = isnull(@StatusChangedBy,''))
		set @ActivityHeader = 'Indent Rejected/Cancelled'
		if @StatusChangedBy = @SVP or @StatusChangedBy = @ConfiguredSVP
		begin
			set @ActivityComments = @SVPRemarks
			update Indent set SeniorVicePresidentStatusDate = @RecordDate	where IndentID = @IndentID
		end
		else
		begin
			set @ActivityComments = @FHRemarks
			update Indent set FunctionHeadStatusDate = @RecordDate	where IndentID = @IndentID
		end
	end
	
	update Indent set
		AssignedTo = @AssignedTo,
		ModifiedDate = @RecordDate
		where IndentID = @IndentID
	
	
	-- generate name and email for users list
	declare @ToEmailNotificationsEmailIDs nvarchar(500)
	declare @CcEmailNotificationsEmailIDs nvarchar(500)

	-- read to email notifications
	DECLARE @ToUsers TABLE(ROWID INT IDENTITY(1,1), UserID nvarchar(100))
	insert into @ToUsers(UserID) select value from dbo.fn_Split(@ToEmailNotifications, ',')

	DECLARE @RowCount INT
	SET @RowCount = (SELECT COUNT(UserID) FROM @ToUsers) 
	DECLARE @I INT
	SET @I = 1
	
	-- Loop through the rows of a table @users
	WHILE (@I <= @RowCount)
	BEGIN
			-- Declare variables to hold the data which we get after looping each record
			SELECT @ToEmailNotificationsEmailIDs = isnull(@ToEmailNotificationsEmailIDs,'') + u.Email + ', ' 
			FROM Users u (nolock)
			join @ToUsers usr on u.UserID = usr.UserID
			WHERE ROWID = @I
			SET @I = @I  + 1
	END

	

	-- read cc email notofications
	DECLARE @CcUsers TABLE(ROWID INT IDENTITY(1,1), UserID nvarchar(100))
	insert into @CcUsers(UserID) select value from dbo.fn_Split(@CcEmailNotifications, ',')
	
	SET @I = 1
	SET @RowCount = (SELECT COUNT(UserID) FROM @CcUsers) 
	-- Loop through the rows of a table @CcUsers
	WHILE (@I <= @RowCount)
	BEGIN
			-- Declare variables to hold the data which we get after looping each record
			SELECT @CcEmailNotificationsEmailIDs = isnull(@CcEmailNotificationsEmailIDs,'') + u.Email + ', ' 
			FROM Users u (nolock)
			join @CcUsers usr on u.UserID = usr.UserID
			WHERE ROWID = @I
			SET @I = @I  + 1
	END

	
	-- Insert into Activity log
	if len(isnull(@ActivityDescription,'')) > 0
	begin
		INSERT INTO ActivityLog( IndentID, UserID, LogTypeID, Header, Description, Comments, RecordDate)
		values (@IndentID, @StatusChangedBy, @ActivityTypeID, @ActivityHeader, @ActivityDescription, @ActivityComments, @RecordDate)
	end
	-- return values for further processing
	select @IndentNumber as IndentNumber, @ToEmailNotificationsEmailIDs as ToEmailNotifications, @CcEmailNotificationsEmailIDs as CcEmailNotifications
	
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[prcGetIndents]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

-- **********************************************************    
-- @@Verion: 1    
-- SP Name: dbo.prcGetIndents   1 
-- Author: Niraj Sinha  
-- Description: assigns indent, and returns data for further action
-- ********************************************************    
/*
select * from item
GO
prcGetIndents 1
*/
CREATE PROCEDURE prcGetIndents
(
   @CompanyID INT
)
AS
BEGIN
	select i.* 
	from Indent i (nolock)
	join Departments d (nolock) on i.DepartmentID = d.DepartmentID
	join Company c (nolock) on d.CompanyID = c.CompanyID
	where c.CompanyID = @CompanyID
	and i.Indent_Status > 0
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[prcGetIndentTrackerData]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

-- **********************************************************    
-- @@Verion: 1    
-- SP Name: dbo.prcGetIndentTrackerData   1 
-- Author: Niraj Sinha  
-- Description: assigns indent, and returns data for further action
-- ********************************************************    
/*
select * from item
GO
prcGetIndentTrackerData 1, 1, 0

select * from indent
*/
CREATE PROCEDURE prcGetIndentTrackerData
(
   @CompanyID INT,
   /*– Pagination Parameters */
   @PageNo INT = null,
   @PageSize INT = null
)
AS
BEGIN
					
declare @Temp table( TotalCount int, ROWNUM int, IndentDate datetime, IndentNumber varchar(100), PositionTitle varchar(100), Technologies varchar(500), NoOfPositions int, 
		Client_Domain varchar(200), Indent_Status varchar(200), AssignedTo varchar(200))
		
;
WITH CTE_Results
		AS (SELECT ROW_NUMBER() OVER (ORDER BY i.IndentDate DESC) AS ROWNUM,
		Count(*) over () AS TotalCount,
		IndentDate = i.IndentDate,
		IndentNumber = i.IndentNumber,
		PositionTitle = i.PositionTitle,
		Technologies = i.Technologies,
		NoOfPositions = i.NoOfPositions,
		Client_Domain = i.Client_Domain,
		Indent_Status = t.Description,
		AssignedTo = u.Name
 from Company c (nolock)
 join Departments d (nolock) on c.CompanyID = d.DepartmentID
 join Indent i (nolock) on d.DepartmentID = i.DepartmentID
 join Type t (nolock) on i.Indent_Status = t.TypeID
 left join Users u (nolock) on i.AssignedTo = u.UserID
 WHERE c.CompanyID = @CompanyID
 and i.Indent_Status > 0
 
 
)
INSERT INTO @Temp
SELECT
    TotalCount,
	ROWNUM,
    IndentDate,
	IndentNumber,
	PositionTitle,
	Technologies,
	NoOfPositions,
	Client_Domain,
	Indent_Status,
	AssignedTo
FROM CTE_Results AS CPC

 
if isnull(@PageSize,0) > 0 and isnull(@PageNo,0) > 0
begin
	declare @lFirstRec int,@lLastRec int
	SET @lFirstRec = ( @PageNo - 1 ) * @PageSize
    SET @lLastRec = ( @PageNo * @PageSize + 1 )
    
	SELECT * FROM @Temp
	WHERE
		ROWNUM > @lFirstRec
		AND ROWNUM < @lLastRec
	 ORDER BY ROWNUM ASC
end
else
begin
	SELECT * FROM @Temp
end
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[prcGetIndentTrackerInfo]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

-- **********************************************************    
-- @@Verion: 1    
-- SP Name: dbo.prcGetIndentTrackerInfo   1 
-- Author: Niraj Sinha  
-- Description: assigns indent, and returns data for further action
-- ********************************************************    
/*
declare @p1 int, @p2 int, @p3 int,@p4 int, @p5 int, @p6 int
set @p1 = 0
set @p2 = 0
set @p3 = 0
set @p4 = 0
set @p5 = 0
set @p6 = 0
exec prcGetIndentTrackerInfo @IndentNumber='iHT-IT-2014-0005', @NoOfPositions=@p1 output, @OffersMade=@p2 output, @OnBoard=@p3 output, @Rejected=@p4 output, @OfferDenied=@p5 output, @InProcess=@p6 output
select @p1, @p2, @p3, @p4, @p5, @p6
*/
CREATE PROCEDURE prcGetIndentTrackerInfo
(
   @IndentNumber varchar(200),
   @NoOfPositions INT OUTPUT,
   @OffersMade INT OUTPUT,
   @OnBoard INT OUTPUT,
   @Rejected INT OUTPUT,
   @OfferDenied INT OUTPUT,
   @InProcess INT OUTPUT
   
)
AS
BEGIN
	
	
	select @NoOfPositions = NoOfPositions from Indent where IndentNumber = @IndentNumber
	declare @Temp table( CandidateID int, CandidateStatusTypeID int)
	insert into @Temp
	select c.CandidateID, c.CandidateStatusTypeID 
		from Candidates c (nolock)
		join Type t (nolock) on c.CandidateStatusTypeID = t.TypeID
		join TypeClass tc (nolock) on t.TypeClassID = tc.TypeClassID
		where tc.Code = '8' and t.Code in('1','4','5','6','7','8','9','10')
		and c.IndentNumber = @IndentNumber
	
    declare @OffersMadeTypeID INT 
	select  @OffersMadeTypeID= TypeID from Type t (nolock)
								join TypeClass tc (nolock) on t.TypeClassID = tc.TypeClassID
								where tc.Code = '8' and t.Code ='6'
    declare @OnBoardTypeID INT 
	select  @OnBoardTypeID= TypeID from Type t (nolock)
								join TypeClass tc (nolock) on t.TypeClassID = tc.TypeClassID
								where tc.Code = '8' and t.Code ='7'
    declare @RejectedTypeID INT 
	select  @RejectedTypeID= TypeID from Type t (nolock)
								join TypeClass tc (nolock) on t.TypeClassID = tc.TypeClassID
								where tc.Code = '8' and t.Code ='9'
    declare @OfferDeniedTypeID INT 
	select  @OfferDeniedTypeID= TypeID from Type t (nolock)
								join TypeClass tc (nolock) on t.TypeClassID = tc.TypeClassID
								where tc.Code = '8' and t.Code ='8'
	declare @ShortListedTypeID INT 
	select  @ShortListedTypeID= TypeID from Type t (nolock)
								join TypeClass tc (nolock) on t.TypeClassID = tc.TypeClassID
								where tc.Code = '8' and t.Code ='1'
	declare @SelectedTypeID INT 
	select  @SelectedTypeID= TypeID from Type t (nolock)
								join TypeClass tc (nolock) on t.TypeClassID = tc.TypeClassID
								where tc.Code = '8' and t.Code ='5'
    declare @InProcessTypeID INT 
	select  @InProcessTypeID= TypeID from Type t (nolock)
								join TypeClass tc (nolock) on t.TypeClassID = tc.TypeClassID
								where tc.Code = '8' and t.Code ='4'

	select @OffersMade = count(CandidateID) from @Temp where CandidateStatusTypeID = @OffersMadeTypeID
	select @OnBoard = count(CandidateID) from @Temp where CandidateStatusTypeID = @OnBoardTypeID
	select @Rejected = count(CandidateID) from @Temp where CandidateStatusTypeID = @RejectedTypeID
	select @OfferDenied = count(CandidateID) from @Temp where CandidateStatusTypeID = @OfferDeniedTypeID
	select @InProcess = count(CandidateID) from @Temp where CandidateStatusTypeID in(@ShortListedTypeID, @InProcessTypeID, @SelectedTypeID)
	
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[prcGetInterviewSchedule]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

-- **********************************************************    
-- @@Verion: 1    
-- SP Name: dbo.prcGetInterviewSchedule
-- Author: Niraj Sinha  
-- Description: assigns indent, and returns data for further action
-- ********************************************************    
/*
dbo.prcGetInterviewSchedule   1, 2

*/
CREATE PROCEDURE prcGetInterviewSchedule
(
   @CandidateID int,
   @InverviewRound INT = null
)
AS
BEGIN
	
	declare @Temp table( InterviewScheduleID int, CandidateID int, CandidateName varchar(200), ContactNumber varchar(200), InverviewRound INT, ScheduledInterviewers VARCHAR(200), 
	Subject VARCHAR(100), Description VARCHAR(500), StartTime datetime, EndTime datetime, AttachResume bit, Status	INT)

	declare @ScheduleInterviewers varchar(200)
	
	if @InverviewRound >= 2
	begin
		select @ScheduleInterviewers = isnull(i.InterviewPanel2, '') 
		from Indent i (nolock)
		join Candidates c (nolock) on i.IndentNumber = c.IndentNumber
		where c.CandidateID = @CandidateID
	end
	else
	begin
		select @ScheduleInterviewers = isnull(i.InterviewPanel1, '') 
		from Indent i (nolock)
		join Candidates c (nolock) on i.IndentNumber = c.IndentNumber
		where c.CandidateID = @CandidateID
	end
	
	insert into @Temp
	select isnull(t.InterviewScheduleID, 0),
		c.CandidateID,
		c.FirstName + ' ' + c.LastName,
		c.ContactNumber,
		isnull(@InverviewRound,1) as InverviewRound,
		isnull(t.ScheduledInterviewers, @ScheduleInterviewers),
		t.Subject,
		t.Description,
		isnull(t.StartTime, getutcdate()),
		isnull(t.EndTime, getutcdate()),
		t.AttachResume,
		t.Status
		from Candidates c (nolock)
		left join InterviewSchedule t (nolock) on c.CandidateID = t.CandidateID
		where c.CandidateID = @CandidateID
		and t.InverviewRound is null or t.InverviewRound = @InverviewRound
		
	
	select * from @Temp
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[prcGetOfferJoiningRatio]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

-- **********************************************************    
-- @@Verion: 1    
-- SP Name: dbo.prcGetOfferJoiningRatio   1 
-- Author: Niraj Sinha  
-- Description: assigns indent, and returns data for further action
-- ********************************************************    
/*
select * from item
GO
prcGetOfferJoiningRatio 1
*/
CREATE PROCEDURE prcGetOfferJoiningRatio
(
   @CompanyID INT
)
AS
BEGIN
	
	
	declare @OffersMadeTypeID INT 
	select @OffersMadeTypeID = TypeID from Type t (nolock)
								join TypeClass tc (nolock) on t.TypeClassID = tc.TypeClassID
								where tc.Code = '8' and t.Code ='6'
	declare @OnBoardTypeID INT 
	select @OnBoardTypeID = TypeID from Type t (nolock)
								join TypeClass tc (nolock) on t.TypeClassID = tc.TypeClassID
								where tc.Code = '8' and t.Code ='7'	
	
	declare @Temp table(DepartmentName varchar(100), CandidateStatusTypeID int, CandidateCount int)
	insert into @Temp
	select d.Name, c.CandidateStatusTypeID, count(c.CandidateID)
	from Candidates c (nolock)
	join Indent i (nolock) on c.IndentNumber = i.IndentNumber
	join Departments d (nolock) on i.DepartmentID = d.DepartmentID
	join Company co (nolock) on d.CompanyID = co.CompanyID
	where co.CompanyID = @CompanyID
	and i.Indent_Status > 0
	and c.CandidateStatusTypeID in (@OffersMadeTypeID, @OnBoardTypeID)
	group by d.Name, c.CandidateStatusTypeID 
	
	declare @Result table(DepartmentName varchar(100), OffersMadeCount int, OnBoardCount int)
	insert into @Result (DepartmentName)
	select DepartmentName from @Temp 
	
	update @Result set OffersMadeCount = CandidateCount from @Temp t
							join @Result r on r.DepartmentName = t.DepartmentName 
							where t.CandidateStatusTypeID = @OffersMadeTypeID
	update @Result set OnBoardCount = CandidateCount from @Temp t
							join @Result r on r.DepartmentName = t.DepartmentName 
							where t.CandidateStatusTypeID = @OnBoardTypeID
	update @Result set OffersMadeCount = 0 where OffersMadeCount is null
	update @Result set OnBoardCount = 0 where OnBoardCount is null
	select * from @Result
			
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[prcGetOpenPositions]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

-- **********************************************************    
-- @@Verion: 1    
-- SP Name: dbo.prcGetOpenPositions   1 
-- Author: Niraj Sinha  
-- Description: assigns indent, and returns data for further action
-- ********************************************************    
/*
declare @p1 int, @p2 int, @p3 int, @p4 int, @p5 int
set @p1 = 0
set @p2 = 0
set @p3 = 0
set @p4 = 0
set @p5 = 0
exec prcGetOpenPositions @CompanyID=1, @OpenPositions=@p1 output, @OffersMade=@p2 output, @OnBoard=@p3 output, @RejectedDenied=@p4 output, @InProcess=@p5 output
select @p1, @p2, @p3, @p4, @p5
*/
CREATE PROCEDURE prcGetOpenPositions
(
   @CompanyID INT,
   @OpenPositions INT OUTPUT,
   @OffersMade INT OUTPUT,
   @OnBoard INT OUTPUT,
   @RejectedDenied INT OUTPUT,
   @InProcess INT OUTPUT
)
AS
BEGIN
	
	declare @NoOfPositions INT
	
	select @NoOfPositions = sum(i.NoOfPositions)
	from Indent i (nolock)
	join Departments d (nolock) on i.DepartmentID = d.DepartmentID
	join Company c (nolock) on d.CompanyID = c.CompanyID
	where c.CompanyID = @CompanyID
	and i.Indent_Status > 0
	
	declare @OffersMadeTypeID INT 
	select @OffersMadeTypeID = TypeID from Type t (nolock)
								join TypeClass tc (nolock) on t.TypeClassID = tc.TypeClassID
								where tc.Code = '8' and t.Code ='6'
	declare @OnBoardTypeID int
	select @OnBoardTypeID = TypeID from Type t (nolock)
								join TypeClass tc (nolock) on t.TypeClassID = tc.TypeClassID
								where tc.Code = '8' and t.Code ='7'	
	declare @RejectedTypeID INT 
	select  @RejectedTypeID= TypeID from Type t (nolock)
								join TypeClass tc (nolock) on t.TypeClassID = tc.TypeClassID
								where tc.Code = '8' and t.Code ='9'
    declare @OfferDeniedTypeID INT 
	select  @OfferDeniedTypeID= TypeID from Type t (nolock)
								join TypeClass tc (nolock) on t.TypeClassID = tc.TypeClassID
								where tc.Code = '8' and t.Code ='8'
	declare @ShortListedTypeID INT 
	select  @ShortListedTypeID= TypeID from Type t (nolock)
								join TypeClass tc (nolock) on t.TypeClassID = tc.TypeClassID
								where tc.Code = '8' and t.Code ='1'
	declare @SelectedTypeID INT 
	select  @SelectedTypeID= TypeID from Type t (nolock)
								join TypeClass tc (nolock) on t.TypeClassID = tc.TypeClassID
								where tc.Code = '8' and t.Code ='5'
    declare @InProcessTypeID INT 
	select  @InProcessTypeID= TypeID from Type t (nolock)
								join TypeClass tc (nolock) on t.TypeClassID = tc.TypeClassID
								where tc.Code = '8' and t.Code ='4'

	select @OffersMade = count(*) from Candidates where CandidateStatusTypeID = @OffersMadeTypeID
	select @OnBoard = count(*) from Candidates where CandidateStatusTypeID = @OnBoardTypeID
	select @OpenPositions = @NoOfPositions - @OffersMade + @OnBoard
	select @RejectedDenied = count(*) from Candidates where CandidateStatusTypeID in (@RejectedTypeID, @OfferDeniedTypeID)
	select @InProcess = count(*) from Candidates where CandidateStatusTypeID in(@ShortListedTypeID, @InProcessTypeID, @SelectedTypeID)
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[prcGetResumeSources]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

-- **********************************************************    
-- @@Verion: 1    
-- SP Name: dbo.prcGetResumeSources   1 
-- Author: Niraj Sinha  
-- Description: assigns indent, and returns data for further action
-- ********************************************************    
/*
select * from item
GO
prcGetResumeSources 1
*/
CREATE PROCEDURE prcGetResumeSources
(
   @CompanyID INT = null   
)
AS
BEGIN
	
	select t.Name as ResumeSource, count(c.CandidateID) as CandidatesCount
	from Candidates c (nolock)
	right join Type t (nolock) on c.ResumeSourceTypeID = t.TypeID
	right join TypeClass tc (nolock) on t.TypeClassID = tc.TypeClassID	
	where tc.Code = '10'
	group by t.Name
	
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[prcInterviewFeedback]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

-- **********************************************************    
-- @@Verion: 1    
-- SP Name: dbo.prcInterviewFeedback   24 
-- Author: Niraj Sinha  
-- Description: assigns indent, and returns data for further action
-- ********************************************************    
/*
prcInterviewFeedback 24
*/
CREATE PROCEDURE prcInterviewFeedback
(
   @CandidateID INT
)
AS
BEGIN
    
	Select CandidateID,
		FirstName,
		LastName,
		CurrentTitle,
		TotalExperience
	from Candidates where CandidateID = @CandidateID
	
	select CandidateID,
			InterviewRound,
			InterviewerName,
			PositionFor,
			ReleventExperience,
			ReleventExperienceDiscountReason,
			TechKnowledgeAreas,
			TechKnowledgeAreasLevel,
			TechKnowledgeAreasComments,
			AnalysisAreas,
			AnalysisAreasLevel,
			AnalysisAreasComments,
			DesignAreas,
			DesignAreasLevel,
			DesignAreasComments,
			CodingAreas,
			CodingAreasLevel,
			CodingAreasComments,
			DatabaseAreas,
			DatabaseAreasLevel,
			DatabaseAreasComments,
			TestingAreas,
			TestingAreasLevel,
			TestingAreasComments,
			ResultOrientationLevel,
			ResultOrientationComments,
			CommunicationSkillsLevel,
			CommunicationSkillsComments,
			TeamWorkingLevel,
			TeamWorkingComments,
			LeadershipCapabilityLevel,
			LeadershipCapabilityComments,
			AttitudeLevel,
			AttitudeComments,
			OverallRatingLevel,
			OverallRatingComments,
			SelectionReason,
			PositivesRemarks,
			ConcernsGaps,
			PositionRecomended,
			PositionSuggested,
			AlternaticeCompetancy,
			TrainingsNeededTechnical,
			TrainingNeededBehavioral,
			CreatedBy,
			CreatedDate
	from InterviewFeedbacks
	where InterviewRound = 1
	and CandidateID = @CandidateID
	
	-- round 2 feedback
	select CandidateID,
			InterviewRound,
			InterviewerName,
			PositionFor,
			ReleventExperience,
			ReleventExperienceDiscountReason,
			TechKnowledgeAreas,
			TechKnowledgeAreasLevel,
			TechKnowledgeAreasComments,
			AnalysisAreas,
			AnalysisAreasLevel,
			AnalysisAreasComments,
			DesignAreas,
			DesignAreasLevel,
			DesignAreasComments,
			CodingAreas,
			CodingAreasLevel,
			CodingAreasComments,
			DatabaseAreas,
			DatabaseAreasLevel,
			DatabaseAreasComments,
			TestingAreas,
			TestingAreasLevel,
			TestingAreasComments,
			ResultOrientationLevel,
			ResultOrientationComments,
			CommunicationSkillsLevel,
			CommunicationSkillsComments,
			TeamWorkingLevel,
			TeamWorkingComments,
			LeadershipCapabilityLevel,
			LeadershipCapabilityComments,
			AttitudeLevel,
			AttitudeComments,
			OverallRatingLevel,
			OverallRatingComments,
			SelectionReason,
			PositivesRemarks,
			ConcernsGaps,
			PositionRecomended,
			PositionSuggested,
			AlternaticeCompetancy,
			TrainingsNeededTechnical,
			TrainingNeededBehavioral,
			CreatedBy,
			CreatedDate
	from InterviewFeedbacks
	where InterviewRound = 2
	and CandidateID = @CandidateID

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[prcResumeSearch]...';


GO
SET QUOTED_IDENTIFIER ON;

SET ANSI_NULLS OFF;


GO

-- **********************************************************    
-- @@Verion: 1    
-- SP Name: dbo.prcResumeSearch   24 
-- Author: Niraj Sinha  
-- Description: assigns indent, and returns data for further action
-- ********************************************************    
/*
select * from item
GO
prcResumeSearch @PageNo=1,@PageSize=4,@SortColumn= 'FirstName', @SortOrder= 'ASC', @CandidateStatus=''
*/
CREATE PROCEDURE prcResumeSearch
(
   /* Optional Filters for Dynamic Search*/
   @SearchString NVARCHAR(200) = NULL,
   @FirstName varchar(100) = NULL,
   @LastName varchar(100) = NULL,
   @Email varchar(100) = NULL,
   @ContactNumber varchar(100) = NULL,
   @MinExperience INT = NULL,
   @ResumeSourceTypeID INT = NULL,
   @ResumeSourceDetail  varchar(100) = NULL,
   @Skills varchar(100) = NULL,
   @Passport BIT = NULL,
   @Visa BIT = NULL,
   @TravelledOnsiteBefore BIT = NULL,
   @Gender varchar(1) = NULL,
   @Certifications varchar(200) = NULL,
   @CandidateStatus varchar(100) = NULL,
   /*– Pagination Parameters */
   @PageNo INT = 1,
   @PageSize INT = 10,
   /*– Sorting Parameters */
   @SortColumn NVARCHAR(50) = 'FirstName',
   @SortOrder NVARCHAR(4)= 'ASC'
)
AS
BEGIN
    /*–Declaring Local Variables corresponding to parameters for modification */
    DECLARE
	@lSearchString NVARCHAR(200) = NULL,
    @lFirstName varchar(100) = NULL,
    @lLastName varchar(100) = NULL,
    @lEmail varchar(100) = NULL,
    @lContactNumber varchar(100) = NULL,
    @lMinExperience INT = NULL,
    @lResumeSourceTypeID INT = NULL,
    @lResumeSourceDetail  varchar(100) = NULL,
    @lSkills varchar(100) = NULL,
    @lPassport BIT = NULL,
    @lVisa BIT = NULL,
    @lTravelledOnsiteBefore BIT = NULL,
    @lGender varchar(1) = NULL,
	@lCertifications varchar(200) = NULL,
	@lCandidateStatusTypeID INT = NULL,
	@lPageNo INT = 1,
	@lPageSize INT = 10,
	/*– Sorting Parameters */
	@lSortColumn NVARCHAR(20),
	@lSortOrder NVARCHAR(4),
	@lFirstRec INT,
    @lLastRec INT,
	@lTotalRows INT
	
	declare @Temp table( TotalCount int, ROWNUM int, CandidateID int, FirstName varchar(100), LastName varchar(100), ContactNumber varchar(20), Email varchar(100), 
		TotalExperience int, Certifications varchar(200), CreatedDate datetime, Remarks varchar(500), Reference1 varchar(500), HireStatus varchar(200), ResumeVirtualPath varchar(500), ResumeFileName varchar(100))

    /*Setting Local Variables*/
	SET @lSearchString = @SearchString
	SET @lFirstName = @FirstName
    SET @lLastName = @LastName
    SET @lEmail = @Email
    SET @lContactNumber = @ContactNumber
    SET @lMinExperience = @MinExperience
    SET @lResumeSourceTypeID = @ResumeSourceTypeID
    SET @lResumeSourceDetail = @ResumeSourceDetail
    SET @lSkills = @Skills
    SET @lPassport = @Passport
    SET @lVisa = @Visa
    SET @lTravelledOnsiteBefore = @TravelledOnsiteBefore
    SET @lGender = @Gender
    SET @lCertifications = @Certifications
	SELECT @lCandidateStatusTypeID = TypeID from Type where Name = @CandidateStatus
	SET @lPageNo = @PageNo
    SET @lPageSize = @PageSize
    SET @lSortColumn = LTRIM(RTRIM(@SortColumn))
    SET @lFirstRec = ( @lPageNo - 1 ) * @lPageSize
    SET @lLastRec = ( @lPageNo * @lPageSize + 1 )
    SET @lTotalRows = @lFirstRec - @lLastRec + 1

    ; WITH CTE_Results
    AS (
		SELECT ROW_NUMBER() OVER (ORDER BY
			CASE WHEN (@lSortColumn = 'FirstName' AND @SortOrder='ASC')
						THEN FirstName
			END ASC,
			CASE WHEN (@lSortColumn = 'FirstName' AND @SortOrder='DESC')
					   THEN FirstName
			END DESC,

			CASE WHEN (@lSortColumn = 'MinExperience' AND @SortOrder='ASC')
					  THEN TotalExperience
			END ASC,
			CASE WHEN @lSortColumn = 'MinExperience' AND @SortOrder='DESC'
					 THEN TotalExperience
			END DESC
	   ) AS ROWNUM,
	   Count(*) over () AS TotalCount,
	   CandidateID,
	   FirstName, 
	   LastName, 
	   ContactNumber, 
	   Email,
	   TotalExperience,
	   Certifications, 
	   CreatedDate, 
		Remarks, 
		Reference1,	
		'' as HireStatus,
		CandidateStatusTypeID,
		'' ResumeVirtualPath, 
		null as ResumeFileName 
 FROM Candidates
 WHERE
	
	(@lSearchString IS NULL OR CandidateID LIKE '%' + @lSearchString + '%' OR FirstName LIKE '%' + @lSearchString + '%' OR LastName LIKE '%' + @lSearchString + '%' OR Email LIKE '%' + @lSearchString + '%' OR Skills LIKE '%' + @lSearchString + '%' OR Certifications LIKE '%' + @lCertifications + '%')
	AND(@lFirstName IS NULL OR FirstName LIKE '%'+ @lFirstName + '%')
    AND(@lLastName IS NULL OR LastName LIKE '%'+ @lLastName + '%')
	AND(@lEmail IS NULL OR Email LIKE '%'+ @lEmail + '%')
    AND(@lContactNumber IS NULL OR ContactNumber LIKE '%'+ @lContactNumber + '%')
    AND(@lMinExperience IS NULL OR TotalExperience >= @lMinExperience)
    AND(@lResumeSourceTypeID IS NULL OR ResumeSourceTypeID = @lResumeSourceTypeID)
    AND(@lResumeSourceDetail IS NULL OR ResumeSourceDetail LIKE '%'+ @lResumeSourceDetail + '%')
    AND(@lSkills IS NULL OR Skills LIKE '%'+ @lSkills + '%')
    AND(@lPassport IS NULL OR Passport = @lPassport)
    AND(@lVisa IS NULL OR Visa = @lVisa)
    AND(@lTravelledOnsiteBefore IS NULL OR TravelledOnsiteBefore = @lTravelledOnsiteBefore)
    AND(@lGender IS NULL OR Gender = @lGender)
	AND(@lCertifications IS NULL OR Certifications LIKE '%'+ @lCertifications + '%')
	AND(@lCandidateStatusTypeID IS NULL OR CandidateStatusTypeID = @lCandidateStatusTypeID)
)
INSERT INTO @Temp
SELECT
    TotalCount,
	ROWNUM,
    CandidateID,
	FirstName, 
	LastName, 
	ContactNumber, 
	Email,
	TotalExperience,
	Certifications, 
	CreatedDate, 
	Remarks, 
	Reference1,	
	HireStatus = (select Name from Type where TypeID = CandidateStatusTypeID),
	ResumeVirtualPath = (select top 1 ResumePath from Resumes where CandidateID = CPC.CandidateID),
	ResumeFileName = null
FROM CTE_Results AS CPC

SELECT * FROM @Temp
WHERE
	ROWNUM > @lFirstRec
    AND ROWNUM < @lLastRec
 ORDER BY ROWNUM ASC

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

-- Types
-- Project status
DECLARE @TypeClassID INT 
INSERT INTO TypeClass(Code, Name, Description,Active,ModifiedDate)
SELECT '1','Project Status','Process statuses', 1, getdate()
where not exists (select 1 from TypeClass where Code='1')

SELECT @TypeClassID= TypeClassID from TypeClass where Code='1'

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
SELECT @TypeClassID, '1', 'Potential New Project', 'New projects', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='1')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
SELECT @TypeClassID, '2', 'Ongoing', 'Ongoing projects', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='2')

-- Indent reason
INSERT INTO TypeClass(Code, Name, Description,Active,ModifiedDate)
SELECT '2','Indent Reason','Indent Reason', 1, getdate()
where not exists (select 1 from TypeClass where Code='2')
SELECT @TypeClassID= TypeClassID from TypeClass where Code='2'

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '1', 'Replacement', 'Replacement', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='1')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '2', 'New Requirement', 'New Requirement', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='2')

-- Resource location
INSERT INTO TypeClass(Code, Name, Description,Active,ModifiedDate)
SELECT '3','Resource Location','Resource Location', 1, getdate()
where not exists (select 1 from TypeClass where Code='3')
SELECT @TypeClassID= TypeClassID from TypeClass where Code='3'


INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '1', 'Onsite', 'Onsite', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='1')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '2', 'Offshore', 'Offshore', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='2')

-- Employment type
INSERT INTO TypeClass(Code, Name, Description,Active,ModifiedDate)
SELECT '4','Employment Type','Employment Type', 1, getdate()
where not exists (select 1 from TypeClass where Code='4')
SELECT @TypeClassID= TypeClassID from TypeClass where Code='4'

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '1', 'Permanent', 'Permanent', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='1')


INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '2', 'Consultant', 'Consultant', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='2')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '3', 'Contract', 'Contract', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='3')

-- Staffing mode
INSERT INTO TypeClass(Code, Name, Description,Active,ModifiedDate)
SELECT '5','Staffing Mode','Staffing Mode', 1, getdate()
where not exists (select 1 from TypeClass where Code='5')
SELECT @TypeClassID= TypeClassID from TypeClass where Code='5'

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '1', 'External', 'External', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='1')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '2', 'Internal', 'Internal', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='2')

-- Visa type
INSERT INTO TypeClass(Code, Name, Description,Active,ModifiedDate)
SELECT '6','Visa Type','Visa Type', 1, getdate()
where not exists (select 1 from TypeClass where Code='6')
SELECT @TypeClassID= TypeClassID from TypeClass where Code='6'


INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '1', 'H1/L1', 'Work Visa', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='1')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '2', 'B1/B2', 'Business Visa', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='2')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '3', 'None', 'None', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='3')

-- Workflow status types
INSERT INTO TypeClass(Code, Name, Description,Active,ModifiedDate)
select '7','Indent Status','Indent Status', 1, getdate()
where not exists (select 1 from TypeClass where Code='7')
SELECT @TypeClassID= TypeClassID from TypeClass where Code='7'

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '1', 'Save', 'Save', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='1')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '2', 'Submitted', 'Send for Approval', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='2')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '3', 'Approved', 'Approved', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='3')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '4', 'On Hold', 'On Hold', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='4')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '5', 'Rejected', 'Rejected', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='5')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '6', 'Cancelled', 'Cancelled', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='6')


-- Candidate status types
INSERT INTO TypeClass(Code, Name, Description,Active,ModifiedDate)
select '8','Candidate Status','Candidate and resume statuses', 1, getdate()
where not exists (select 1 from TypeClass where Code='8')
SELECT @TypeClassID= TypeClassID from TypeClass where Code='8'

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '1', 'Short Listed', 'Short Listed', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='1')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '2', 'Archived', 'Archived', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='2')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '3', 'Not Appeared', 'Did not turned up for interview', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='3')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '4', 'In Process', 'Selection process is in progress', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='4')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '5', 'Selected', 'Selected in interview', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='5')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '6', 'Offered', 'Offer letter issued', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='6')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '7', 'On Board', 'On Board', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='7')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '8', 'Declined Offer', 'Did not joined after offer made', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='8')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '9', 'Rejected', 'Rejected in selection process', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='9')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '10', 'On Hold', 'Candidate is on hold', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='10')

-- Activity log types
INSERT INTO TypeClass(Code, Name, Description,Active,ModifiedDate)
select '9','Activity Log','Activity log types', 1, getdate()
where not exists (select 1 from TypeClass where Code='9')
SELECT @TypeClassID= TypeClassID from TypeClass where Code='9'

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '1', 'IndentRaised', 'Indent Raised', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='1')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '2', 'IndentApproved', 'Indent Approved', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='2')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '3', 'IndentRejected', 'Indent Rejected or Cancelled', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='3')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '4', 'IndentOnHold', 'Indent On Hold', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='4')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '5', 'SelectedRound1', 'Selected in Technical Interview Round 1', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='5')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '6', 'SelectedRound2', 'Selected in Technical Interview Round 2', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='6')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '7', 'RejectedRound1', 'Rejected in Technical Interview Round 1', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='7')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '8', 'RejectedRound2', 'Rejected in Technical Interview Round 2', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='8')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '9', 'HRSelected', 'Selected in HR Round', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='9')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '10', 'HRRejected', 'Rejected in HR Round', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='10')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '11', 'OfferMade', 'Offered by HR', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='11')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '12', 'OnBoard', 'Joined Company', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='12')



-- Resume source types
INSERT INTO TypeClass(Code, Name, Description,Active,ModifiedDate)
select '10','Resume Source','Resume sources types', 1, getdate()
where not exists (select 1 from TypeClass where Code='10')
SELECT @TypeClassID= TypeClassID from TypeClass where Code='10'

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '1', 'Direct', 'Direct', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='1')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '2', 'Employee', 'Employee Reference', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='2')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '3', 'Vendor', 'Placement agencies', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='3')


-- Skills grade types
INSERT INTO TypeClass(Code, Name, Description,Active,ModifiedDate)
select '11','Skills Grade','Grading for candidate skills', 1, getdate()
where not exists (select 1 from TypeClass where Code='11')
SELECT @TypeClassID= TypeClassID from TypeClass where Code='11'

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '1', 'Expert', 'Has good knowledge & experience in the relevent technology & functional area. Has capability for problem solving and capability to train/coach others.', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='1')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '2', 'Proficient', 'Has good knowledge and application skills in relevent functional & technology area. Has capability to experience to perform task independently.', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='2')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '3', 'Good Understanding', 'Has good clarity on fundamentals and relevent experience in application. Would require more time, comprehensive/OJT training, to become fully effective and work independently.', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='3')

INSERT INTO Type(TypeClassID, Code, Name, Description,Active,ModifiedDate)
select @TypeClassID, '4', 'Beginner', 'Understands fundamentals/basic theorotical knowledge but limited in application ability.', 1, getdate()
where not exists (select 1 from Type where TypeClassID=@TypeClassID and Code='4')



-- Test data scripts
DECLARE @CompanyID INT 
INSERT INTO Company(Code, Name, Address, City, State, Country, PostalCode, URL)
VALUES('iSpace','iSpace, Inc.','2381 Rosecrans Ave., Suite 110','El Segundo', 'CA', 'USA', '90245','http://www.ispace.com')
SELECT @CompanyID= CompanyID from Company where Code='iSpace'

-- Features
INSERT INTO Features(Code, CompanyID, Description) 
select 'Indent',@CompanyID,'Indent'
where not exists (select 1 from Features where Code='Indent')

INSERT INTO Features(Code, CompanyID, Description) 
select 'Interviews',@CompanyID,'Interviews'
where not exists (select 1 from Features where Code='Interviews')

INSERT INTO Features(Code, CompanyID, Description) 
select 'ResumeManagement',@CompanyID,'Uploading, modifying, deleting resumes'
where not exists (select 1 from Features where Code='ResumeManagement')

INSERT INTO Features(Code, CompanyID, Description) 
select 'Administrator',@CompanyID,'Configuring all master data'
where not exists (select 1 from Features where Code='Administrator') 

-- Users
INSERT INTO Users(UserID, CompanyID, Name, Branches, AccessFeatures) 
select 'nirajs',@CompanyID,'Niraj Sinha','ODC,OC','Administrator'
where not exists (select 1 from Users where UserID='nirajs')

INSERT INTO Users(UserID, CompanyID, Name, Email) 
select 'HR',@CompanyID,'HR', 'niraj.sinha@ispace.com'
where not exists (select 1 from Users where UserID='HR')

-- branches
INSERT INTO Branches(CompanyID, Code, Name, Address, City, State, Country, PostalCode, URL)
select @CompanyID, 'OC','iSpace, Inc.','2100 Main Street, Suite 210','Irvine', 'CA', 'USA', '92614','http://www.ispace.com'
where not exists (select 1 from Branches where Code='OC')

INSERT INTO Branches(CompanyID, Code, Name, Address, City, State, Country, PostalCode, URL)
select  @CompanyID, 'ODC','Eliptico IT Solutions Pvt. Ltd.','C - Block , 3rd Floor, Wing A (1) Cybergateway, Hi-Tech City, Madhapur','Hyderabad', 'Telangana', 'India', '','http://www.ispace.com'
where not exists (select 1 from Branches where Code='ODC')

-- Departments
INSERT INTO Departments(CompanyID, Code, Name, Active, ModifiedDate)
select @CompanyID, 'IT','IT Services', 1, getdate()
where not exists (select 1 from Departments where Code='IT')

INSERT INTO Departments(CompanyID, Code, Name, Active, ModifiedDate)
select @CompanyID, 'BPO','BPO', 1, getdate()
where not exists (select 1 from Departments where Code='BPO')

INSERT INTO Departments(CompanyID, Code, Name, Active, ModifiedDate)
select @CompanyID, 'Admin','Admin', 1, getdate()
where not exists (select 1 from Departments where Code='Admin')

INSERT INTO Departments(CompanyID, Code, Name, Active, ModifiedDate)
select @CompanyID, 'FIN','Finance', 1, getdate()
where not exists (select 1 from Departments where Code='FIN')

INSERT INTO Departments(CompanyID, Code, Name, Active, ModifiedDate)
select @CompanyID, 'HR','Human Resources', 1, getdate()
where not exists (select 1 from Departments where Code='HR')


-- TechnologiesAndSkills
INSERT INTO TechnologiesAndSkills(Code, CompanyID, Name, SkillType, Active)
select 'WCF', @CompanyID, 'WCF', 1, 1
where not exists (select 1 from TechnologiesAndSkills where Code='WCF')

INSERT INTO TechnologiesAndSkills(Code, CompanyID, Name, SkillType, Active)
select 'MVC', @CompanyID, 'MVC', 1, 1
where not exists (select 1 from TechnologiesAndSkills where Code='MVC')

INSERT INTO TechnologiesAndSkills(Code, CompanyID, Name, SkillType, Active)
select 'WebAPI', @CompanyID, 'WebAPI', 1, 1
where not exists (select 1 from TechnologiesAndSkills where Code='WebAPI')

INSERT INTO TechnologiesAndSkills(Code, CompanyID, Name, SkillType, Active)
select 'AngularJS', @CompanyID, 'AngularJS', 1, 1
where not exists (select 1 from TechnologiesAndSkills where Code='AngularJS')

INSERT INTO TechnologiesAndSkills(Code, CompanyID, Name, SkillType, Active)
select 'Java', @CompanyID, 'Java', 1, 1
where not exists (select 1 from TechnologiesAndSkills where Code='Java')

INSERT INTO TechnologiesAndSkills(Code, CompanyID, Name, SkillType, Active)
select 'Struts', @CompanyID, 'Struts', 1, 1
where not exists (select 1 from TechnologiesAndSkills where Code='Struts')

INSERT INTO TechnologiesAndSkills(Code, CompanyID, Name, SkillType, Active)
select 'JBPM', @CompanyID, 'JBPM', 1, 1
where not exists (select 1 from TechnologiesAndSkills where Code='JBPM')

INSERT INTO TechnologiesAndSkills(Code, CompanyID, Name, SkillType, Active)
select 'OOP', @CompanyID, 'OOP', 1, 1
where not exists (select 1 from TechnologiesAndSkills where Code='OOP')

INSERT INTO TechnologiesAndSkills(Code, CompanyID, Name, SkillType, Active)
select 'OOAD', @CompanyID, 'OOAD', 1, 1
where not exists (select 1 from TechnologiesAndSkills where Code='OOAD')

INSERT INTO TechnologiesAndSkills(Code, CompanyID, Name, SkillType, Active)
select 'Design Patterns', @CompanyID, 'Design Patterns', 1, 1
where not exists (select 1 from TechnologiesAndSkills where Code='Design Patterns')

INSERT INTO TechnologiesAndSkills(Code, CompanyID, Name, SkillType, Active)
select 'UML', @CompanyID, 'UML', 1, 1
where not exists (select 1 from Features where Code='UML')

INSERT INTO TechnologiesAndSkills(Code, CompanyID, Name, SkillType, Active)
select 'Sharepoint', @CompanyID, 'Sharepoint', 1, 1
where not exists (select 1 from TechnologiesAndSkills where Code='Sharepoint')

INSERT INTO TechnologiesAndSkills(Code, CompanyID, Name, SkillType, Active)
select 'Negotiation', @CompanyID, 'Negotiation', 2, 1
where not exists (select 1 from TechnologiesAndSkills where Code='Negotiation')

-- InterviewPanel
INSERT INTO InterviewPanel(Name, CompanyID, Departments, Technologies, Level)
select 'Niraj Sinha', @CompanyID, 'IT, BPO, Admin, FIN','OOAD, OOP, WCF, WebAPI, MVC', 1
where not exists (select 1 from InterviewPanel where Name='Niraj Sinha')

INSERT INTO InterviewPanel(Name, CompanyID, Departments, Technologies, Level)
select 'Pradeep Kumar Gavuji', @CompanyID, 'IT','WCF, WebAPI, MVC', 1
where not exists (select 1 from InterviewPanel where Name='Pradeep Kumar Gavuji')

INSERT INTO InterviewPanel(Name, CompanyID, Departments, Technologies, Level)
select 'Gnanasekhar Eatakuri', @CompanyID, 'IT','WebAPI, MVC', 1
where not exists (select 1 from InterviewPanel where Name='Gnanasekhar Eatakuri')

INSERT INTO InterviewPanel(Name, CompanyID, Departments, Technologies, Level)
select 'Ramakrishna Bodi', @CompanyID, 'IT, BPO, Admin, FIN','OOAD, OOP, WCF, WebAPI, MVC', 2
where not exists (select 1 from InterviewPanel where Name='Ramakrishna Bodi')

INSERT INTO InterviewPanel(Name, CompanyID, Departments, Technologies, Level)
select 'Sreenivasa Rao Uyyurru', @CompanyID, 'IT','MVC', 2
where not exists (select 1 from InterviewPanel where Name='Sreenivasa Rao Uyyurru')

INSERT INTO InterviewPanel(Name, CompanyID, Departments, Technologies, Level)
select 'Naveen Krishnamsetti', @CompanyID, 'HR','Negotiation', 1
where not exists (select 1 from InterviewPanel where Name='Naveen Krishnamsetti')

-- Consultancies
INSERT INTO Consultancies(ConsultancyName,Address1,Address2,City,State,Country,PostalCode,ContactPerson,ContactNumber,Email)
select 'Pyramid Consultancy Services', 'Ameerpet','','Hyderabad','Telangana','India','500016','Sunil','999955555','sunil@gmail.com'
where not exists (select 1 from Consultancies where ConsultancyName='Pyramid Consultancy Services')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
